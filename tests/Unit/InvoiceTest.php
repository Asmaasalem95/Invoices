<?php

namespace Tests\Unit;

use App\Helpers\InvoiceStatus;
use App\Models\GlobalSetting;
use App\Repositories\SettingRepository;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Modules\Company\Models\Company;
use Modules\Company\Repositories\CompanyRepository;
use Modules\Invoice\Models\Invoice;
use Modules\Invoice\Repositories\InvoiceRepository;
use Modules\Invoice\Services\InvoiceService;
use Tests\TestCase;

class InvoiceTest extends TestCase
{
    use DatabaseTransactions;

    private $invoiceRepo;
    private $companyRepo;
    private $invoiceMockery;
    private $companyMockery;
    private $settingMockery;
    private $invoiceService;
    private $settingRepo;

    public function setUp(): void
    {
        $this->invoiceMockery = new Invoice();
        $this->companyMockery = new Company();
        $this->settingMockery = new GlobalSetting();
        $this->settingRepo = new SettingRepository($this->settingMockery);

        $this->invoiceRepo = new InvoiceRepository($this->invoiceMockery);
        $this->companyRepo = new CompanyRepository($this->companyMockery);
        $this->invoiceService = new InvoiceService($this->invoiceRepo, $this->companyRepo, $this->settingRepo);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function test_can_check_debtor_limitations_return_false_before_accept_the_invoice()
    {
        //create
        $creditor = Company::factory()->create(['type' => 'creditor', 'debtor_total_limit' => 50000]);

        $debtor = Company::factory()->create(['type' => 'debtor', 'debtor_total_limit'=> null]);
        //create invoice for debtor
        $invoices = Invoice::factory()->count(5)->create(['creditor_id' => $creditor->id, 'debtor_id' => $debtor->id, 'total_amount' => 10000, 'status' => 0]);
        $checker = $this->invoiceService->checkDebtorLimitations($debtor->id, $creditor->id);
        //assert
        $this->assertFalse($checker);
    }

    public function test_can_check_debtor_limitations_return_true_before_accept_the_invoice()
    {
        //create
        $creditor = Company::factory()->create(['type' => 'creditor', 'debtor_total_limit' => 50000]);
        $debtor = Company::factory()->create(['type' => 'debtor', 'debtor_total_limit'=> null]);
        //create invoice for debtor
        $invoices = Invoice::factory()->create(['creditor_id' => $creditor->id, 'debtor_id' => $debtor->id, 'total_amount' => 10000, 'status' => 0]);
        $checker = $this->invoiceService->checkDebtorLimitations($debtor->id, $creditor->id);
        $this->assertTrue($checker);
    }


    public function test_can_calculate_invoice_total_fees()
    {
        $invoice = Invoice::factory()->create();
        $feesPercentage = $this->settingRepo->findByKey('selling_fees_percentage')->value;
        $feesTotalAmount = $invoice->total_amount * $feesPercentage / 100;
        $feesTotalAmountCalculated = $this->invoiceService->calculateInvoiceFees($invoice->total_amount);
        $this->assertEquals($feesTotalAmount, $feesTotalAmountCalculated);
    }

}
